<?php

namespace diangong\base\helpers;


class ArrayHelper extends \yii\helpers\ArrayHelper
{
    public static function toNestedHtml($array, $properties = [])
    {

        $activeid = \Yii::$app->request->get('id', 1);
        $nodeDepth = $currDepth = $counter = 0;
        $out = Html::beginTag('ul', ['class' => 'tree']);
        foreach ($nodes as $node) {
            $nodeDepth = $node['depth'];
            $nodeLeft = $node['lft'];
            $nodeRight = $node['rgt'];
            $nodeKey = $node['id'];
            $nodeName = empty($node['nickname']) ? $node['name'] : $node['nickname'];
            $isChild = ($nodeRight == $nodeLeft + 1);
            if ($nodeDepth == $currDepth) {
                if ($counter > 0) {
                    $out .= "</li>";
                }
            } elseif ($nodeDepth > $currDepth) {
                $out .= Html::beginTag('ul');
                $currDepth = $currDepth + ($nodeDepth - $currDepth);
            } elseif ($nodeDepth < $currDepth) {
                $out .= str_repeat("</li></ul>", $currDepth - $nodeDepth) . "</li>";
                $currDepth = $currDepth - ($currDepth - $nodeDepth);
            }

            $nodeOptions = [
                'data-node' => [
                    'id' => $nodeKey,
                    'lft' => $nodeLeft,
                    'rgt' => $nodeRight,
                    'depth' => $nodeDepth
                ]
            ];
            if ($activeid == $nodeKey) {
                Html::addCssClass($nodeOptions, 'active');
            };

            $out .= Html::beginTag('li', $nodeOptions) . Html::a($nodeName, ['view', 'id' => $nodeKey]);
            ++$counter;
        }
        $out .= str_repeat("</li></ul>", $nodeDepth) . "</li>";
        $out .= "</ul>";
        return $out;
    }

    public static function toNestedArray($collection)
    {

        $trees = array();
        $l = 0;

        if (count($collection) > 0) {
            // Node Stack. Used to help building the hierarchy
            $stack = array();

            foreach ($collection as $node) {
                $item = $node;
                $item['children'] = array();

                // Number of stack items
                $l = count($stack);

                // Check if we're dealing with different levels
                while ($l > 0 && $stack[$l - 1]['depth'] >= $item['depth']) {
                    array_pop($stack);
                    $l--;
                }

                // Stack is empty (we are inspecting the root)
                if ($l == 0) {
                    // Assigning the root node
                    $i = count($trees);
                    $trees[$i] = $item;
                    $stack[] = &$trees[$i];
                } else {
                    // Add node to parent
                    $i = count($stack[$l - 1]['children']);
                    $stack[$l - 1]['children'][$i] = $item;
                    $stack[] = &$stack[$l - 1]['children'][$i];
                }
            }
        }
        return $trees;
    }

    /**
     * @param $array
     * @return
     * {
     * id          : "string" // will be autogenerated if omitted
     * text        : "string" // node text
     * icon        : "string" // string for custom
     * state       : {
     * opened    : boolean  // is the node open
     * disabled  : boolean  // is the node disabled
     * selected  : boolean  // is the node selected
     * },
     * children    : []  // array of strings or objects
     * li_attr     : {}  // attributes for the generated LI node
     * a_attr      : {}  // attributes for the generated A node
     * }
     */
    public static function toJsTreeData($array, $options = [])
    {
        $companyIcon = self::getValue($options, 'icon.company', 'folder icon');
        $branchIcon = self::getValue($options, 'icon.branch', 'fork icon');
        $othersIcon = self::getValue($options, 'icon.others', 'folder outline icon');
        $result = [];
        $arr = [];
        foreach ($array as $item) {
            $arr['id'] = $item['id'];
            $arr['depth'] = $item['depth'];
            $arr['text'] = empty($item['nickname'])?$item['name']:$item['nickname'];
            $arr['icon'] = (int)$item['type'] === 1 ? $companyIcon : ((int)$item['type'] === 2 ? $branchIcon : $othersIcon);
            array_push($result, $arr);
        }
        return $result;
    }

}
